// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/compiler/Scanner_Jflex.flex

package compiler;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner_phase1 {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u1600"+
    "\4\u0100\1\u1700\10\u0100\1\u1800\2\u0100\1\u1900\1\u1a00\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1b00\1\u1800\1\u0900\3\u0100\1\u1300"+
    "\1\u1c00\114\u0100\1\u1d00\1\u1300\153\u0100\1\u1e00\11\u0100\1\u1f00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\3\7\1\11\1\12\1\7"+
    "\1\13\1\14\1\15\1\16\11\17\1\0\1\7\1\5"+
    "\1\20\1\5\2\0\1\21\3\22\1\23\1\22\2\24"+
    "\1\25\2\24\1\26\1\24\1\27\1\24\1\30\1\24"+
    "\1\31\5\24\1\32\2\24\1\7\1\33\1\7\1\0"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\24\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\24\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\32\1\62\1\24\1\7\1\63\1\7\7\0"+
    "\1\3\32\0\1\1\101\0\1\64\u017d\0\12\65\206\0"+
    "\12\65\306\0\12\65\234\0\12\65\166\0\12\65\140\0"+
    "\12\65\166\0\12\65\106\0\12\65\u0116\0\12\65\106\0"+
    "\12\65\346\0\1\1\u015f\0\12\65\46\0\12\65\u012c\0"+
    "\12\65\200\0\12\65\246\0\12\65\6\0\12\65\266\0"+
    "\12\65\126\0\12\65\206\0\12\65\6\0\12\65\246\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\114\0"+
    "\1\66\123\0\1\1\u01cf\0\12\65\46\0\12\65\306\0"+
    "\12\65\26\0\12\65\126\0\12\65\u0196\0\12\65\6\0"+
    "\u0100\67\20\0\12\65\343\0\1\70\242\0\12\65\206\0"+
    "\12\65\u012c\0\12\65\200\0\12\65\74\0\12\65\220\0"+
    "\12\65\166\0\12\65\146\0\12\65\206\0\12\65\106\0"+
    "\12\65\266\0\12\65\u0164\0\62\65\100\0\12\65\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[8192];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\3\1\1\3\3\2\4\4\5"+
    "\2\1\15\5\2\1\2\0\1\2\1\6\1\0\3\5"+
    "\1\0\12\5\1\3\15\5\1\0\1\7\2\0\1\4"+
    "\3\5\2\0\23\5\2\0\1\6\2\5\2\0\10\5"+
    "\1\10\2\5\2\0\7\5\1\0\3\5\1\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\344\0\71\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0273\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0720\0\u0e79\0\u0eb2\0\u0804"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a"+
    "\0\u1443\0\u147c\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u0273"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\u1b2a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\12\1\7\1\13\1\14\1\15\1\5\6\16"+
    "\1\17\1\20\1\21\1\16\1\22\1\23\1\16\1\24"+
    "\1\25\1\26\1\27\1\30\2\16\1\31\3\16\1\32"+
    "\1\16\1\33\1\34\1\35\1\36\1\16\1\37\1\40"+
    "\1\16\1\41\1\42\1\15\3\2\73\0\1\3\106\0"+
    "\1\7\50\0\2\43\1\0\1\43\1\0\64\43\10\0"+
    "\1\7\72\0\1\7\5\0\1\7\63\0\1\7\4\0"+
    "\1\7\61\0\1\44\3\0\1\45\2\0\1\7\64\0"+
    "\1\46\1\0\1\14\1\15\12\0\1\47\32\0\1\15"+
    "\17\0\1\46\1\0\2\15\45\0\1\15\21\0\2\16"+
    "\1\0\12\16\1\0\27\16\24\0\2\16\1\0\12\16"+
    "\1\0\5\16\1\50\21\16\24\0\2\16\1\0\12\16"+
    "\1\0\20\16\1\51\6\16\24\0\2\16\1\0\12\16"+
    "\1\0\5\16\1\52\21\16\57\0\1\7\53\0\1\53"+
    "\52\0\2\16\1\0\12\16\1\0\16\16\1\54\1\16"+
    "\1\55\1\16\1\56\4\16\24\0\2\16\1\0\12\16"+
    "\1\0\13\16\1\57\2\16\1\60\10\16\24\0\2\16"+
    "\1\0\12\16\1\0\5\16\1\61\10\16\1\62\3\16"+
    "\1\56\4\16\24\0\2\16\1\0\12\16\1\0\13\16"+
    "\1\63\13\16\24\0\2\16\1\0\12\16\1\0\1\16"+
    "\1\64\14\16\1\65\10\16\24\0\2\16\1\0\12\16"+
    "\1\0\6\16\1\66\5\16\1\67\1\70\4\16\1\71"+
    "\4\16\24\0\2\16\1\0\12\16\1\0\5\16\1\72"+
    "\15\16\1\73\3\16\24\0\2\16\1\0\12\16\1\0"+
    "\20\16\1\74\2\16\1\75\3\16\24\0\2\16\1\0"+
    "\12\16\1\0\5\16\1\76\21\16\24\0\2\16\1\0"+
    "\12\16\1\0\22\16\1\77\4\16\24\0\2\16\1\0"+
    "\12\16\1\0\10\16\1\100\7\16\1\101\6\16\24\0"+
    "\2\16\1\0\12\16\1\0\16\16\1\102\10\16\24\0"+
    "\2\16\1\0\12\16\1\0\10\16\1\103\16\16\71\0"+
    "\1\7\73\0\1\104\2\0\2\43\1\0\1\43\1\0"+
    "\1\43\1\105\62\43\11\106\1\0\57\106\2\45\3\0"+
    "\62\45\1\0\1\45\16\0\2\46\3\0\1\107\15\0"+
    "\1\107\23\0\1\46\21\0\2\110\1\0\3\110\11\0"+
    "\6\110\44\0\2\16\1\0\12\16\1\0\25\16\1\111"+
    "\1\16\24\0\2\16\1\0\12\16\1\0\11\16\1\112"+
    "\15\16\24\0\2\16\1\0\12\16\1\0\1\16\1\113"+
    "\25\16\50\0\1\114\4\0\1\115\37\0\2\16\1\0"+
    "\12\16\1\0\16\16\1\116\10\16\24\0\2\16\1\0"+
    "\12\16\1\0\5\16\1\117\21\16\24\0\2\16\1\0"+
    "\12\16\1\0\16\16\1\120\10\16\24\0\2\16\1\0"+
    "\12\16\1\0\1\16\1\121\25\16\24\0\2\16\1\0"+
    "\12\16\1\0\15\16\1\122\11\16\24\0\2\16\1\0"+
    "\12\16\1\0\6\16\1\123\20\16\24\0\2\16\1\0"+
    "\12\16\1\0\23\16\1\124\3\16\24\0\2\16\1\0"+
    "\12\16\1\0\21\16\1\125\5\16\24\0\2\16\1\0"+
    "\12\16\1\0\13\16\1\126\13\16\24\0\2\16\1\0"+
    "\12\16\1\0\20\16\1\66\6\16\24\0\2\16\1\0"+
    "\12\16\1\0\17\16\1\127\7\16\24\0\2\16\1\0"+
    "\12\16\1\0\22\16\1\66\4\16\24\0\2\16\1\0"+
    "\12\16\1\0\16\16\1\130\10\16\24\0\2\16\1\0"+
    "\12\16\1\0\25\16\1\66\1\16\24\0\2\16\1\0"+
    "\12\16\1\0\13\16\1\116\13\16\24\0\2\16\1\0"+
    "\12\16\1\0\11\16\1\131\15\16\24\0\2\16\1\0"+
    "\12\16\1\0\2\16\1\132\24\16\24\0\2\16\1\0"+
    "\12\16\1\0\22\16\1\133\4\16\24\0\2\16\1\0"+
    "\12\16\1\0\20\16\1\134\6\16\24\0\2\16\1\0"+
    "\12\16\1\0\11\16\1\135\15\16\24\0\2\16\1\0"+
    "\12\16\1\0\23\16\1\136\3\16\24\0\2\16\1\0"+
    "\12\16\1\0\11\16\1\137\15\16\24\0\2\16\1\0"+
    "\12\16\1\0\11\16\1\140\15\16\76\0\1\7\11\106"+
    "\1\141\57\106\12\0\2\142\2\0\2\143\45\0\1\143"+
    "\21\0\2\16\1\0\1\144\11\16\1\0\27\16\24\0"+
    "\2\16\1\0\12\16\1\0\15\16\1\70\11\16\24\0"+
    "\2\16\1\0\12\16\1\0\4\16\1\145\22\16\65\0"+
    "\1\146\56\0\1\147\41\0\2\16\1\0\12\16\1\0"+
    "\13\16\1\66\13\16\24\0\2\16\1\0\12\16\1\0"+
    "\1\16\1\150\25\16\24\0\2\16\1\0\12\16\1\0"+
    "\11\16\1\66\15\16\24\0\2\16\1\0\12\16\1\0"+
    "\21\16\1\135\5\16\24\0\2\16\1\0\12\16\1\0"+
    "\22\16\1\151\4\16\24\0\2\16\1\0\12\16\1\0"+
    "\11\16\1\152\15\16\24\0\2\16\1\0\12\16\1\0"+
    "\2\16\1\140\24\16\24\0\2\16\1\0\12\16\1\0"+
    "\5\16\1\66\21\16\24\0\2\16\1\0\12\16\1\0"+
    "\21\16\1\136\5\16\24\0\2\16\1\0\12\16\1\0"+
    "\16\16\1\153\10\16\24\0\2\16\1\0\12\16\1\0"+
    "\2\16\1\66\1\16\1\66\22\16\24\0\2\16\1\0"+
    "\12\16\1\0\24\16\1\154\2\16\24\0\2\16\1\0"+
    "\12\16\1\0\13\16\1\155\13\16\24\0\2\16\1\0"+
    "\12\16\1\0\23\16\1\156\3\16\24\0\2\16\1\0"+
    "\12\16\1\0\11\16\1\157\15\16\24\0\2\16\1\0"+
    "\12\16\1\0\21\16\1\66\5\16\24\0\2\16\1\0"+
    "\12\16\1\0\5\16\1\160\21\16\24\0\2\16\1\0"+
    "\12\16\1\0\4\16\1\66\22\16\24\0\2\16\1\0"+
    "\12\16\1\0\13\16\1\125\13\16\6\0\11\106\1\141"+
    "\3\106\1\3\53\106\16\0\2\143\45\0\1\143\21\0"+
    "\2\16\1\0\12\16\1\0\20\16\1\161\6\16\24\0"+
    "\2\16\1\0\4\16\1\162\1\123\4\16\1\0\27\16"+
    "\57\0\1\163\70\0\1\164\35\0\2\16\1\0\12\16"+
    "\1\0\12\16\1\66\14\16\24\0\2\16\1\0\12\16"+
    "\1\0\11\16\1\165\15\16\24\0\2\16\1\0\12\16"+
    "\1\0\15\16\1\125\11\16\24\0\2\16\1\0\12\16"+
    "\1\0\20\16\1\70\6\16\24\0\2\16\1\0\12\16"+
    "\1\0\1\16\1\166\25\16\24\0\2\16\1\0\12\16"+
    "\1\0\11\16\1\167\15\16\24\0\2\16\1\0\12\16"+
    "\1\0\20\16\1\170\6\16\24\0\2\16\1\0\12\16"+
    "\1\0\15\16\1\171\11\16\24\0\2\16\1\0\12\16"+
    "\1\0\20\16\1\172\6\16\24\0\2\16\1\0\12\16"+
    "\1\0\15\16\1\173\11\16\45\0\1\174\72\0\1\174"+
    "\45\0\2\16\1\0\12\16\1\0\15\16\1\175\11\16"+
    "\24\0\2\16\1\0\12\16\1\0\22\16\1\125\4\16"+
    "\24\0\2\16\1\0\12\16\1\0\3\16\1\66\23\16"+
    "\24\0\2\16\1\0\12\16\1\0\15\16\1\66\11\16"+
    "\24\0\2\16\1\0\12\16\1\0\7\16\1\66\17\16"+
    "\24\0\2\16\1\0\12\16\1\0\1\16\1\176\25\16"+
    "\24\0\2\16\1\0\12\16\1\0\22\16\1\177\4\16"+
    "\42\0\1\200\52\0\2\16\1\0\12\16\1\0\23\16"+
    "\1\125\3\16\24\0\2\16\1\0\12\16\1\0\26\16"+
    "\1\66\24\0\2\16\1\0\12\16\1\0\5\16\1\201"+
    "\21\16\42\0\1\7\52\0\2\16\1\0\12\16\1\0"+
    "\7\16\1\202\17\16\24\0\2\16\1\0\12\16\1\0"+
    "\5\16\1\65\21\16\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7011];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\33\1\2\0\2\1\1\0"+
    "\3\1\1\0\30\1\1\0\1\1\2\0\4\1\2\0"+
    "\23\1\2\0\3\1\2\0\13\1\2\0\7\1\1\0"+
    "\3\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
StringBuilder answer=new StringBuilder();
private void handle_key_words(String s){
    answer.append(s+"\n");
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_phase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { answer=new StringBuilder();answer.append("error");
            }
            // fall through
          case 9: break;
          case 2:
            { 
            }
            // fall through
          case 10: break;
          case 3:
            { handle_key_words(yytext());
            }
            // fall through
          case 11: break;
          case 4:
            { answer.append("T_INTLITERAL "+yytext()+"\n");
            }
            // fall through
          case 12: break;
          case 5:
            { answer.append("T_ID "+yytext()+"\n");
            }
            // fall through
          case 13: break;
          case 6:
            { answer.append("T_DOUBLELITERAL "+yytext()+"\n");
            }
            // fall through
          case 14: break;
          case 7:
            { answer.append("T_STRINGLITERAL "+yytext()+"\n");
            }
            // fall through
          case 15: break;
          case 8:
            { answer.append("T_BOOLEANLITERAL "+yytext()+"\n");
            }
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
